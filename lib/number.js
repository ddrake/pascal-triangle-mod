// Generated by CoffeeScript 1.4.0
(function() {
  var buildTriangle, canv, canvHeight, canvWidth, clear, colorFunc, colorMod2, colorMod3, colorMod4, colorMod5, ctx, d1, d2, draw_hexagon, draw_hexagons, draw_row, hexPixels, makeRow, mod, refresh, rowCount, setLayout;

  canvWidth = 600;

  canvHeight = canvWidth * Math.sqrt(3) / 2;

  rowCount = 32;

  hexPixels = Math.floor(canvWidth / rowCount);

  d1 = hexPixels / 2;

  d2 = d1 / Math.sqrt(3.0);

  mod = 2;

  canv = document.getElementById('canv');

  ctx = canv.getContext("2d");

  setLayout = function(e) {
    canvHeight = canvWidth * Math.sqrt(3) / 2;
    hexPixels = Math.floor(canvWidth / rowCount);
    d1 = hexPixels / 2;
    d2 = d1 / Math.sqrt(3.0);
    canv.width = canvWidth;
    return canv.height = canvHeight;
  };

  clear = function() {
    ctx.fillStyle = "#000";
    ctx.fillRect(0, 0, canv.width, canv.height);
    return ctx.fillStyle = "#fff";
  };

  makeRow = function(prev) {
    var a2, n;
    a2 = (function() {
      var _i, _ref, _results;
      _results = [];
      for (n = _i = 0, _ref = prev.length - 2; 0 <= _ref ? _i <= _ref : _i >= _ref; n = 0 <= _ref ? ++_i : --_i) {
        _results.push((prev[n] + prev[n + 1]) % mod);
      }
      return _results;
    })();
    a2.push(1);
    a2.unshift(1);
    return a2;
  };

  buildTriangle = function(max) {
    var current, n, results;
    results = [[1]];
    current = [1, 1];
    results.push(current);
    n = 1;
    while (n <= max) {
      current = makeRow(current);
      results.push(current);
      n += 1;
    }
    return results;
  };

  draw_hexagons = function(triangle, func) {
    var i, startX, startY, _i, _ref, _results;
    startX = canvWidth / 2;
    startY = 0;
    _results = [];
    for (i = _i = 0, _ref = triangle.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
      _results.push(draw_row(startX - i * d1, startY + i * (d1 + d2), triangle[i], func));
    }
    return _results;
  };

  draw_row = function(startX, startY, row, func) {
    var i, _i, _ref, _results;
    _results = [];
    for (i = _i = 0, _ref = row.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
      _results.push(draw_hexagon(startX + 2 * d1 * i, startY, func(row[i]), '#fff'));
    }
    return _results;
  };

  draw_hexagon = function(x, y, fillColor, strokeColor) {
    ctx.fillStyle = fillColor;
    ctx.strokeStyle = strokeColor;
    ctx.beginPath();
    ctx.moveTo(x, y);
    ctx.lineTo(x + d1, y + d2);
    ctx.lineTo(x + d1, y + d2 + d1);
    ctx.lineTo(x, y + 2 * d2 + d1);
    ctx.lineTo(x - d1, y + d2 + d1);
    ctx.lineTo(x - d1, y + d2);
    ctx.closePath();
    ctx.fill();
    ctx.lineWidth = 1;
    return ctx.stroke();
  };

  colorMod2 = function(x) {
    if (x === 0) {
      return '#f00';
    } else {
      return '#0f0';
    }
  };

  colorMod3 = function(x) {
    if (x === 0) {
      return '#f00';
    } else if (x === 1) {
      return '#0f0';
    } else {
      return '#00f';
    }
  };

  colorMod4 = function(x) {
    if (x === 0) {
      return '#f00';
    } else if (x === 1) {
      return '#0f0';
    } else if (x === 2) {
      return '#990';
    } else {
      return '#909';
    }
  };

  colorMod5 = function(x) {
    if (x === 0) {
      return '#f00';
    } else if (x === 1) {
      return '#0f0';
    } else if (x === 2) {
      return '#990';
    } else if (x === 3) {
      return '#909';
    } else {
      return '#099';
    }
  };

  colorFunc = colorMod2;

  $("#rows").change(function() {
    rowCount = parseInt($(this).val());
    refresh();
    return true;
  });

  $("#mod").change(function() {
    mod = parseInt($(this).val());
    if (mod === 2) {
      colorFunc = colorMod2;
    } else if (mod === 3) {
      colorFunc = colorMod3;
    } else {
      colorFunc = colorMod4;
    }
    refresh();
    return true;
  });

  $("#size").change(function() {
    canvWidth = parseInt($(this).val());
    refresh();
    return true;
  });

  refresh = function() {
    var tri;
    setLayout();
    clear();
    tri = buildTriangle(rowCount);
    return draw_hexagons(tri, colorFunc);
  };

  window.onload = function() {
    return refresh();
  };

}).call(this);
